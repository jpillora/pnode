// Generated by CoffeeScript 1.6.3
var http, shoe,
  __slice = [].slice;

http = require('http');

shoe = require('shoe');

exports.parse = function(str) {
  var args, port;
  args = [];
  if (typeof str === 'string' && /^(.+?)(:(\d+))?(\/.+)$/.test(str)) {
    port = parseInt(RegExp.$3, 10);
    if (port) {
      args.push(port);
    }
    args.push(RegExp.$1);
    args.push(RegExp.$4);
  }
  return args;
};

exports.bindServer = function() {
  var args, conns, emitter, listening, opts, s, sock, _i;
  emitter = arguments[0], args = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), opts = arguments[_i++];
  if (!opts) {
    throw "Missing options";
  }
  if (args[0] instanceof http.Server) {
    s = args.shift();
  }
  if (!s) {
    s = http.createServer();
    s.listen.apply(s, args);
  }
  conns = [];
  s.on('connection', function(conn) {
    conns.push(conn);
    return conn.once('close', function() {
      return conns.splice(conns.indexOf(conn), 1);
    });
  });
  listening = function() {
    emitter.emit('bound');
    return emitter.once('unbind', function() {
      var c, _j, _len;
      for (_j = 0, _len = conns.length; _j < _len; _j++) {
        c = conns[_j];
        c.destroy();
      }
      return s.close();
    });
  };
  if (s.address()) {
    listening();
  } else {
    s.once('listening', listening);
  }
  s.once('close', function() {
    return emitter.emit('unbound');
  });
  sock = shoe(function(stream) {
    stream.destroy = null;
    return emitter.emit('stream', stream);
  });
  sock.install(s, opts);
};

exports.bindClient = function() {
  throw "bind ws client not supported in node";
};

/*
//@ sourceMappingURL=ws.map
*/
