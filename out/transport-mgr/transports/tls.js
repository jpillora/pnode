// Generated by CoffeeScript 1.6.3
var fs, secure, tls, _,
  __slice = [].slice;

tls = require('tls');

fs = require('fs');

_ = require('../../../vendor/lodash');

secure = require("../secure-common");

exports.bindServer = function() {
  var args, emitter, opts;
  emitter = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  if (typeof args[args.length - 1] === 'object') {
    opts = args.pop();
  }
  emitter.emit('uri', "tls://" + (typeof args[1] === 'string' ? args[1] : '0.0.0.0') + ":" + args[0]);
  emitter.emit('configuring');
  secure.checkCerts(opts, function(opts) {
    var s;
    if (opts.rejectUnauthorized === undefined) {
      opts.rejectUnauthorized = false;
    }
    s = tls.createServer(opts);
    s.on('secureConnection', function(stream) {
      return emitter.emit('stream', stream);
    });
    s.listen.apply(s, args);
    s.once('listening', function() {
      emitter.emit('bound');
      return emitter.once('unbind', function() {
        return s.close();
      });
    });
    return s.once('close', function() {
      return emitter.emit('unbound');
    });
  });
};

exports.bindClient = function() {
  var args, emitter, opts, stream;
  emitter = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  opts = {};
  if (typeof args[0] === 'number') {
    opts.port = args.shift();
  }
  if (typeof args[0] === 'string') {
    opts.hostname = args.shift();
  }
  if (typeof args[0] === 'object') {
    _.merge(opts, args.shift());
  }
  if (opts.rejectUnauthorized === undefined) {
    opts.rejectUnauthorized = false;
  }
  emitter.emit('uri', "tls://" + (opts.hostname || 'localhost') + ":" + opts.port);
  stream = tls.connect.call(null, opts);
  emitter.emit('stream', stream);
  stream.once('secureConnect', function() {
    return emitter.emit('bound');
  });
  emitter.once('unbind', function() {
    return stream.end();
  });
  stream.once('end', function() {
    return emitter.emit('unbound');
  });
};

/*
//@ sourceMappingURL=tls.map
*/
