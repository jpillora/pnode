// Generated by CoffeeScript 1.6.3
var fs, secure, tls, _,
  __slice = [].slice;

tls = require('tls');

fs = require('fs');

_ = require('../../../vendor/lodash');

secure = require("../secure-common");

exports.bindServer = function() {
  var args, callback, opts, pserver;
  callback = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  pserver = this;
  if (typeof args[args.length - 1] === 'object') {
    opts = args.pop();
  }
  return secure.checkCerts(opts, function(opts) {
    var s;
    if (opts.rejectUnauthorized === undefined) {
      opts.rejectUnauthorized = false;
    }
    s = tls.createServer(opts, function(stream) {
      return pserver.handle(stream);
    });
    s.once('listening', function() {
      var addr;
      addr = s.address();
      callback({
        uri: "tls://" + addr.address + ":" + addr.port,
        unbind: function(cb) {
          return s.close(cb);
        }
      });
    });
    s.listen.apply(s, args);
  });
};

exports.bindClient = function() {
  var args, opts, pclient, uri;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  opts = {};
  if (typeof args[0] === 'number') {
    opts.port = args.shift();
  }
  if (typeof args[0] === 'string') {
    opts.hostname = args.shift();
  }
  if (typeof args[0] === 'object') {
    _.merge(opts, args.shift());
  }
  if (opts.rejectUnauthorized === undefined) {
    opts.rejectUnauthorized = false;
  }
  uri = "tls://" + (opts.hostname || 'localhost') + ":" + opts.port;
  pclient = this;
  pclient.createConnection(function(callback) {
    var stream;
    stream = tls.connect.call(null, opts);
    return stream.once('secureConnect', function() {
      return callback({
        uri: uri,
        stream: stream,
        unbind: function(cb) {
          stream.once('end', cb);
          return stream.end();
        }
      });
    });
  });
};

/*
//@ sourceMappingURL=tls.map
*/
