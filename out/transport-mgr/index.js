// Generated by CoffeeScript 1.6.3
var extract, files, fs, helper, path, re, transports;

fs = require('fs');

path = require('path');

helper = require('../helper');

re = /^([a-z]+):\/\//;

transports = {};

exports.parse = function(str) {
  var args, hostname, port;
  args = [];
  if (typeof str === 'string' && /^(.+?)(:(\d+))?$/.test(str)) {
    hostname = RegExp.$1;
    port = parseInt(RegExp.$3, 10);
    if (port) {
      args.push(port);
    }
    args.push(hostname);
  }
  return args;
};

extract = function(args) {
  var name, parseFn, parsed, trans, transport, uri;
  transport = args.shift();
  if (!transport) {
    throw "name missing";
  }
  if (re.test(transport)) {
    name = RegExp.$1;
    trans = exports.get(name);
    uri = transport.replace(re, '');
  } else {
    name = transport;
    trans = exports.get(name);
  }
  if (!trans) {
    throw "'" + name + "' not found";
  }
  parseFn = trans.parse || exports.parse;
  parsed = parseFn(uri);
  while (parsed.length) {
    args.unshift(parsed.pop());
  }
  return trans;
};

exports.bind = function(context, args, callback) {
  var err, trans;
  args = Array.prototype.slice.call(args);
  try {
    trans = extract(args);
  } catch (_error) {
    err = _error;
    context.err("Transport: " + err);
  }
  if (context.name === 'Client') {
    context.once('stream', function(obj) {
      return callback(obj);
    });
    trans.bindClient.apply(context, args);
  } else if (context.name === 'Server') {
    trans.bindServer.apply(context, [callback].concat(args));
  }
};

exports.add = function(name, obj) {
  if (typeof obj.bindServer !== 'function' || typeof obj.bindClient !== 'function') {
    throw "Transport '" + name + "' cannot be added, bind methods are missing";
  }
  if (/[^a-z]/.test(name)) {
    throw "Transport name must be lowercase letters only";
  }
  if (exports.get(name)) {
    throw "Transport '" + name + "' already exists";
  }
  transports[name] = obj;
  return true;
};

exports.get = function(name) {
  return transports[name];
};

if (!process.browser) {
  files = fs.readdirSync(path.join(__dirname, "transports"));
  files.filter(function(f) {
    return /\.js$/.test(f);
  }).forEach(function(f) {
    return exports.add(f.replace('.js', ''), require("./transports/" + f));
  });
}

/*
//@ sourceMappingURL=index.map
*/
