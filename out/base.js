// Generated by CoffeeScript 1.6.3
var Base, DynamicExposed, EventEmitter2, Logger, RemoteContext, addr, addrs, crypto, guid, ips, name, os, transportMgr, util, _, _i, _len, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

EventEmitter2 = require('eventemitter2').EventEmitter2;

util = require('util');

_ = require('../vendor/lodash');

transportMgr = require('./transport-mgr');

RemoteContext = require('./context');

Logger = (function(_super) {
  __extends(Logger, _super);

  function Logger() {
    _ref = Logger.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Logger.prototype.name = 'Logger';

  Logger.prototype.log = function() {
    var _ref1;
    if ((_ref1 = this.opts) != null ? _ref1.debug : void 0) {
      return console.log(this.toString() + ' ' + util.format.apply(null, arguments));
    }
  };

  Logger.prototype.warn = function() {
    return console.warn('WARNING: ' + this.toString() + ' ' + util.format.apply(null, arguments));
  };

  Logger.prototype.err = function(str) {
    return this.emit('error', new Error("" + this + " " + str));
  };

  Logger.prototype.toString = function() {
    return "" + this.name + ": " + this.id + ":";
  };

  return Logger;

})(EventEmitter2);

crypto = require("crypto");

guid = function() {
  return crypto.randomBytes(6).toString('hex');
};

os = require("os");

ips = [];

_ref1 = typeof os.networkInterfaces === "function" ? os.networkInterfaces() : void 0;
for (name in _ref1) {
  addrs = _ref1[name];
  for (_i = 0, _len = addrs.length; _i < _len; _i++) {
    addr = addrs[_i];
    if (addr.family === 'IPv4') {
      ips.push(addr.address);
    }
  }
}

DynamicExposed = (function() {
  function DynamicExposed(fn) {
    this.fn = fn;
  }

  return DynamicExposed;

})();

Base = (function(_super) {
  __extends(Base, _super);

  Base.prototype.name = 'Base';

  function Base(incoming) {
    this.guid = guid();
    if ((incoming != null ? incoming.name : void 0) === 'LocalPeer') {
      this.opts = incoming.opts;
      this.id = incoming.id || this.guid;
      this.pubsub = incoming.pubsub;
      this.exposed = incoming.exposed;
    } else {
      this.opts = _.isString(incoming) ? {
        id: incoming
      } : incoming || {};
      this.id = this.opts.id || this.guid;
      this.pubsub = new EventEmitter2;
      this.exposed = this.defaultExposed();
    }
    _.defaults(this.opts, this.defaults);
    _.bindAll(this);
    this.isChanging = false;
    this.isBound = false;
  }

  Base.prototype.options = function(opts) {
    return _.extend(this.opts, opts);
  };

  Base.prototype.defaultExposed = function() {
    var parent;
    parent = this;
    return {
      _pnode: {
        id: this.id,
        guid: this.guid,
        ips: ips.filter(function(ip) {
          return ip !== '127.0.0.1';
        }),
        subscribe: function(event) {
          return this.events[event] = 1;
        },
        unsubscribe: function(event) {
          return delete this.events[event];
        },
        publish: function() {
          var args, cb;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (typeof args[0] === 'function') {
            cb = args.shift();
          }
          parent.pubsub.emit.apply(null, args);
          if (cb) {
            return cb(true);
          }
        },
        ping: function(cb) {
          parent.log('ping %s -> %s', parent.id, this.id);
          return cb(true);
        },
        events: this.exposeDynamic(function() {
          return Object.keys(parent.pubsub._events);
        })
      }
    };
  };

  Base.prototype.exposeDynamic = function(fn) {
    return new DynamicExposed(fn);
  };

  Base.prototype.expose = function(obj) {
    return _.merge(this.exposed, obj);
  };

  Base.prototype.uri = function() {
    var _ref2;
    return (_ref2 = this.tInterface) != null ? _ref2.uri : void 0;
  };

  Base.prototype.bind = function() {
    var _this = this;
    if (this.isBound) {
      if (this.isChanging) {
        this.warn('unbind in progress');
      }
      return;
    }
    this.setIsChanging(true);
    transportMgr.bind(this, arguments, function(tInterface) {
      _this.tInterface = tInterface;
      _this.setIsChanging(false);
      _this.setIsBound(true);
    });
  };

  Base.prototype.unbind = function() {
    var _this = this;
    if (!this.isBound) {
      if (this.isChanging) {
        this.warn('bind in progress');
      }
      return;
    }
    this.setIsChanging(true);
    this.tInterface.unbind(function() {
      _this.setIsChanging(false);
      _this.setIsBound(false);
    });
  };

  Base.prototype.setIsChanging = function(flag) {
    var action;
    this.isChanging = flag;
    if (flag) {
      action = (this.isBound ? 'un' : '') + 'binding';
      this.emit(action);
      return this.log(action);
    }
  };

  Base.prototype.setIsBound = function(flag) {
    var action;
    this.isBound = flag;
    action = (flag ? '' : 'un') + 'bound';
    this.emit(action);
    return this.log(action);
  };

  Base.prototype.wrapObject = function(input, ctx) {
    return this.wrapObjectAcc('root', input, ctx);
  };

  Base.prototype.wrapObjectAcc = function(name, input, ctx) {
    var k, output, type, v;
    if (input instanceof DynamicExposed) {
      return input.fn();
    }
    type = typeof input;
    if (input instanceof Array) {
      return input;
    }
    if (input && type === 'object') {
      output = {};
      for (k in input) {
        v = input[k];
        output[k] = this.wrapObjectAcc(k, v, ctx);
      }
      return output;
    }
    if (type === 'function') {
      return this.timeoutify(name, input, ctx);
    }
    return input;
  };

  Base.prototype.timeoutify = function(name, fn, ctx) {
    var parent, type, _base,
      _this = this;
    if (ctx == null) {
      ctx = this;
    }
    parent = this;
    (_base = parent.timeoutify).id || (_base.id = 0);
    type = ctx instanceof RemoteContext ? 'local' : 'remote';
    return function() {
      var a, args, i, id, t, timedout, _j, _len1;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      t = null;
      timedout = false;
      id = parent.timeoutify.id++;
      for (i = _j = 0, _len1 = args.length; _j < _len1; i = ++_j) {
        a = args[i];
        if (typeof a === 'function') {
          args[i] = function() {
            clearTimeout(t);
            if (timedout) {
              return;
            }
            parent.emit(['timein', name], args, ctx);
            a.apply(this, arguments);
          };
          t = setTimeout(function() {
            timedout = true;
            if (!parent.isBound) {
              return;
            }
            parent.emit(['timeout', name], args, ctx);
          }, parent.opts.timeout);
          break;
        }
      }
      return fn.apply(ctx, args);
    };
  };

  Base.prototype.ips = ips;

  return Base;

})(Logger);

Base.Logger = Logger;

module.exports = Base;

/*
//@ sourceMappingURL=base.map
*/
