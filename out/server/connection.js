// Generated by CoffeeScript 1.6.3
var Connection, Logger, ObjectIndex, RemoteContext, dnode, helper, servers,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

dnode = require('dnode');

Logger = require('../logger');

helper = require('../helper');

RemoteContext = require('../context');

ObjectIndex = require('object-index');

servers = [];

module.exports = Connection = (function(_super) {
  __extends(Connection, _super);

  Connection.prototype.name = 'Connection';

  function Connection(server, read, write) {
    var _this = this;
    this.server = server;
    this.opts = this.server.opts;
    Object.defineProperty(this, 'uri', {
      get: function() {
        return _this.server.uri;
      }
    });
    this.accepted = false;
    this.id = this.guid = "...";
    this.subs = {};
    this.ctx = new RemoteContext;
    this.ctx.getAddr(read);
    this.d = dnode(this.server.wrapObject(this.server.exposed, this.ctx));
    this.d.on('error', this.onError.bind(this));
    this.d.on('fail', this.onFail.bind(this));
    this.d.once('remote', this.onRemote.bind(this));
    read.once('close', this.d.end);
    read.once('end', this.d.end);
    if (read !== write) {
      write.once('close', this.d.end);
      write.once('end', this.d.end);
    }
    this.d.once('end', function() {
      return _this.emit('down');
    });
    read.pipe(this.d).pipe(write);
  }

  Connection.prototype.unbind = function(cb) {
    if (cb) {
      this.d.once('end', cb);
    }
    this.d.end();
    return this.removeAllListeners();
  };

  Connection.prototype.onRemote = function(remote) {
    var meta;
    remote = this.server.wrapObject(remote);
    meta = remote._pnode;
    if (!meta) {
      this.warn("Invalid pnode connection");
      d.end();
      return;
    }
    this.id = meta.id, this.guid = meta.guid;
    this.ctx.getMeta(meta);
    this.log("client events: %j", Object.keys(this.ctx.events));
    this.remote = remote;
    this.emit('remote', remote);
    this.emit('up');
  };

  Connection.prototype.onError = function(err) {
    this.warn("dnode error: " + err);
    return this.emit('error', err);
  };

  Connection.prototype.onFail = function(err) {
    this.warn("dnode fail: " + err);
    return this.emit('fail', err);
  };

  Connection.prototype.publish = function() {
    var args;
    args = arguments;
    if (!this.ctx.events[args[0]]) {
      this.log("not subscribed to event: " + args[0]);
      return;
    }
    return this.remote._pnode.publish.apply(null, args);
  };

  Connection.prototype.subscribe = function(event, fn) {
    return this.remote._pnode.subscribe(event);
  };

  Connection.prototype.toString = function() {
    return "" + this.name + ": " + this.server.id + "<-" + this.id + ":";
  };

  return Connection;

})(Logger);

/*
//@ sourceMappingURL=connection.map
*/
