// Generated by CoffeeScript 1.6.3
var Base, Connection, ObjectIndex, RemoteContext, dnode, helper, servers,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

dnode = require('dnode');

Base = require('../base');

helper = require('../helper');

RemoteContext = require('../context');

ObjectIndex = require('object-index');

servers = [];

module.exports = Connection = (function(_super) {
  __extends(Connection, _super);

  Connection.prototype.name = 'Connection';

  function Connection(server, read, write) {
    var _this = this;
    this.server = server;
    this.opts = this.server.opts;
    this.id = this.guid = "...";
    this.subs = {};
    this.ctx = new RemoteContext;
    this.ctx.getAddr(read);
    this.d = dnode(this.server.exposeWith(this.ctx));
    helper.proxyEvents(this.d, this, 'error', 'fail');
    this.d.once('remote', this.onRemote.bind(this));
    read.once('close', this.d.end);
    read.once('end', this.d.end);
    write.once('close', this.d.end);
    write.once('end', this.d.end);
    this.d.once('end', function() {
      _this.log("DNODE END");
      return _this.emit('down');
    });
    read.pipe(this.d).pipe(write);
  }

  Connection.prototype.unbind = function() {
    this.log("EXPLICIT UNBIND");
    if (this.d) {
      return this.d.end();
    }
  };

  Connection.prototype.onRemote = function(remote) {
    var meta;
    meta = remote._pnode;
    if (!meta) {
      this.log("closing conn, not a pnode conn");
      d.end();
      return;
    }
    this.id = meta.id, this.guid = meta.guid;
    this.ctx.getMeta(meta);
    this.remote = remote;
    this.emit('remote', remote);
    this.emit('up');
  };

  Connection.prototype.publish = function() {
    var args;
    args = arguments;
    if (!this.ctx.events[args[0]]) {
      this.log("not subscribed to event: " + args[0]);
      return;
    }
    return this.remote._pnode.publish.apply(null, args);
  };

  Connection.prototype.subscribe = function(event, fn) {
    return this.remote._pnode.subscribe(event);
  };

  return Connection;

})(Base.Logger);

/*
//@ sourceMappingURL=connection.map
*/
