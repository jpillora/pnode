// Generated by CoffeeScript 1.6.3
var Base, RemoteContext, RemotePeer,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Base = require('../base');

RemoteContext = require('../context');

module.exports = RemotePeer = (function(_super) {
  __extends(RemotePeer, _super);

  RemotePeer.prototype.name = 'RemotePeer';

  function RemotePeer(local, guid, id, ips) {
    this.local = local;
    this.guid = guid;
    this.id = id;
    this.ips = ips;
    this.connecting = false;
    this.ctx = new RemoteContext;
    this.isUp(false);
    this.opts = this.local.opts;
    this.cliconns = [];
  }

  RemotePeer.prototype.add = function(cliconn) {
    var _this = this;
    this.log("add connection (first remote:" + (!this.up) + ")");
    this.ctx.combine(cliconn.ctx);
    if (!this.up) {
      this.remote = cliconn.remote;
    }
    this.cliconns.push(cliconn);
    cliconn.once('down', function() {
      _this.log("LOST CONNECTION (from " + _this.local.id + ")");
      _this.cliconns.splice(_this.cliconns.indexOf(cliconn), 1);
      return _this.setActive();
    });
    return this.setActive();
  };

  RemotePeer.prototype.setActive = function() {
    var c;
    c = this.cliconns[0];
    this.remote = c ? c.remote : null;
    this.publish = c ? c.publish.bind(c) : null;
    this.subscribe = c ? c.subscribe.bind(c) : null;
    return this.isUp(typeof this.remote === 'object');
  };

  RemotePeer.prototype.isUp = function(up) {
    if (this.up === up) {
      return;
    }
    if (up) {
      this.up = true;
      this.emit('up');
    } else {
      this.up = false;
      this.remote = null;
      this.emit('down');
    }
  };

  RemotePeer.prototype.unbind = function() {
    var cliconn, _i, _len, _ref, _results;
    _ref = Array.prototype.slice.call(this.cliconns);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cliconn = _ref[_i];
      _results.push(cliconn.unbind());
    }
    return _results;
  };

  RemotePeer.prototype.serialize = function() {
    return {
      id: this.id,
      guid: this.guid,
      ips: this.ips,
      clients: helper.serialize(this.clients)
    };
  };

  return RemotePeer;

})(Base.Logger);

/*
//@ sourceMappingURL=remote-peer.map
*/
